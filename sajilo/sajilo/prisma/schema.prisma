// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Car {
  id          String    @id @default(uuid())
  make        String
  model       String
  year        Int
  type        String
  transmission String
  seats       Int
  pricePerDay Float
  available   Boolean   @default(true)
  location    String
  imageUrl    String
  description String?
  features    Json       @default("[]")
  bookings    Booking[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Booking {
  id          String   @id @default(uuid())
  car         Car      @relation(fields: [carId], references: [id])
  carId       String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  startDate   DateTime
  endDate     DateTime
  totalPrice  Float
  status      String   // PENDING, CONFIRMED, CANCELLED, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
